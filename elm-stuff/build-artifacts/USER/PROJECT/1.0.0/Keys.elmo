Elm.Keys = Elm.Keys || {};
Elm.Keys.make = function (_elm) {
   "use strict";
   _elm.Keys = _elm.Keys || {};
   if (_elm.Keys.values)
   return _elm.Keys.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Keys",
   $Basics = Elm.Basics.make(_elm),
   $Char = Elm.Char.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var list_to_chars_hardcoded = function (codes) {
      return function () {
         switch (codes.ctor)
         {case "::": switch (codes._0)
              {case 32: switch (codes._1.ctor)
                   {case "::": switch (codes._1._0)
                        {case 73:
                           switch (codes._1._1.ctor)
                             {case "::":
                                switch (codes._1._1._0)
                                  {case 79:
                                     switch (codes._1._1._1.ctor)
                                       {case "::":
                                          switch (codes._1._1._1._0)
                                            {case 80:
                                               switch (codes._1._1._1._1.ctor)
                                                 {case "[]": return "W";}
                                                 break;}
                                            break;
                                          case "[]": return "V";}
                                       break;
                                     case 80:
                                     switch (codes._1._1._1.ctor)
                                       {case "[]": return "U";}
                                       break;}
                                  break;
                                case "[]": return "T";}
                             break;
                           case 79:
                           switch (codes._1._1.ctor)
                             {case "::":
                                switch (codes._1._1._0)
                                  {case 80:
                                     switch (codes._1._1._1.ctor)
                                       {case "[]": return "S";}
                                       break;
                                     case 85:
                                     switch (codes._1._1._1.ctor)
                                       {case "[]": return "Z";}
                                       break;}
                                  break;
                                case "[]": return "R";}
                             break;
                           case 80:
                           switch (codes._1._1.ctor)
                             {case "::":
                                switch (codes._1._1._0)
                                  {case 85:
                                     switch (codes._1._1._1.ctor)
                                       {case "[]": return "Y";}
                                       break;}
                                  break;
                                case "[]": return "Q";}
                             break;
                           case 85:
                           switch (codes._1._1.ctor)
                             {case "[]": return "X";}
                             break;}
                        break;
                      case "[]": return "P";}
                   break;
                 case 73: switch (codes._1.ctor)
                   {case "::": switch (codes._1._0)
                        {case 79:
                           switch (codes._1._1.ctor)
                             {case "::":
                                switch (codes._1._1._0)
                                  {case 80:
                                     switch (codes._1._1._1.ctor)
                                       {case "::":
                                          switch (codes._1._1._1._0)
                                            {case 85:
                                               switch (codes._1._1._1._1.ctor)
                                                 {case "[]": return "O";}
                                                 break;}
                                            break;
                                          case "[]": return "G";}
                                       break;
                                     case 85:
                                     switch (codes._1._1._1.ctor)
                                       {case "[]": return "N";}
                                       break;}
                                  break;
                                case "[]": return "F";}
                             break;
                           case 80:
                           switch (codes._1._1.ctor)
                             {case "::":
                                switch (codes._1._1._0)
                                  {case 85:
                                     switch (codes._1._1._1.ctor)
                                       {case "[]": return "M";}
                                       break;}
                                  break;
                                case "[]": return "E";}
                             break;
                           case 85:
                           switch (codes._1._1.ctor)
                             {case "[]": return "L";}
                             break;}
                        break;
                      case "[]": return "D";}
                   break;
                 case 79: switch (codes._1.ctor)
                   {case "::": switch (codes._1._0)
                        {case 80:
                           switch (codes._1._1.ctor)
                             {case "::":
                                switch (codes._1._1._0)
                                  {case 85:
                                     switch (codes._1._1._1.ctor)
                                       {case "[]": return "K";}
                                       break;}
                                  break;
                                case "[]": return "C";}
                             break;
                           case 85:
                           switch (codes._1._1.ctor)
                             {case "[]": return "J";}
                             break;}
                        break;
                      case "[]": return "B";}
                   break;
                 case 80: switch (codes._1.ctor)
                   {case "::": switch (codes._1._0)
                        {case 85:
                           switch (codes._1._1.ctor)
                             {case "[]": return "I";}
                             break;}
                        break;
                      case "[]": return "A";}
                   break;
                 case 85: switch (codes._1.ctor)
                   {case "[]": return "H";}
                   break;}
              break;}
         return " ";
      }();
   };
   var mtail = function (l) {
      return function () {
         var _v27 = $List.tail(l);
         switch (_v27.ctor)
         {case "Just": return _v27._0;}
         _U.badCase($moduleName,
         "on line 58, column 11 to 49");
      }();
   };
   var mhead = function (l) {
      return function () {
         var _v29 = $List.head(l);
         switch (_v29.ctor)
         {case "Just": return _v29._0;}
         _U.badCase($moduleName,
         "on line 57, column 11 to 48");
      }();
   };
   var nth = F2(function (l,n) {
      return _U.cmp(n,
      1) > 0 ? A2(nth,
      mtail(l),
      n - 1) : mhead(l);
   });
   var list_to_chars2 = function (codes) {
      return _U.eq(codes,
      _L.fromArray([73
                   ,76
                   ,89])) ? "I love you" : _U.eq(codes,
      _L.fromArray([72
                   ,73
                   ,89])) ? "I hate you" : "Who are you";
   };
   var list_to_chars = function (codes) {
      return A2($List.map,
      $Char.fromCode,
      codes);
   };
   var main = $Signal.map($Graphics$Element.show)($Signal.map($String.concat)($Signal.map($List.reverse)($Signal.map(function (codes) {
      return A2($List.map,
      list_to_chars_hardcoded,
      codes);
   })($Signal.map(function (hash) {
      return function (_) {
         return _.keys;
      }(hash);
   })(A2($Signal.foldp,
   F2(function (keys,hash) {
      return _U.cmp($List.length(keys),
      5) > 0 ? hash : _U.eq($List.length(keys),
      0) ? _U.replace([["current_keys"
                       ,_L.fromArray([])]
                      ,["keys"
                       ,A2($List._op["::"],
                       hash.current_keys,
                       hash.keys)]],
      hash) : _U.cmp($List.length(keys),
      $List.length(hash.current_keys)) > 0 ? _U.replace([["current_keys"
                                                         ,keys]],
      hash) : hash;
   }),
   {_: {}
   ,current_keys: _L.fromArray([])
   ,keys: _L.fromArray([])})(A2($Signal.map,
   $Set.toList,
   $Keyboard.keysDown)))))));
   _elm.Keys.values = {_op: _op
                      ,main: main
                      ,list_to_chars: list_to_chars
                      ,list_to_chars2: list_to_chars2
                      ,nth: nth
                      ,mhead: mhead
                      ,mtail: mtail
                      ,list_to_chars_hardcoded: list_to_chars_hardcoded};
   return _elm.Keys.values;
};